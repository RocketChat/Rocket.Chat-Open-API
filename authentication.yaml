openapi: 3.0.0
info:
  version: 1.0.0
  title: Authentication
  description: |-
    To securely interact with the Rocket.Chat API, authentication is required using your `username` and `password`. This  grants you the ability to make requests on the Rocket.Chat workspace as an authenticated user, ensuring the security of your interactions.

    Upon successful authentication, the API responds with a JSON object containing an authentication token (`authToken`) and a unique user identifier (`userId`). The `authToken` is passed as `X-Auth-Token` header, while the `userId` as `X-User-Id` header when making  requests to protected endpoints that mandate authentication.

    Additionally, the Rocket.Chat API provides alternative authentication methods through OAuth apps like Facebook, Google and Twitter.
servers:
  - url: 'http://localhost:3000'
paths:
  /api/v1/login:
    post:
      tags:
        - Authentication
      summary: Login with Username and Password
      description: |-
        -  Although none of the body parameters are required, it's mandatory to include  either the `user` AND `password`  or only the `resume` parameter.

        - To authenticate a request, you need to pass the `userId` and `authToken` values from this JSON response object as Headers in the request. The `authToken` is passed as `X-Auth-Token` header, while the `userId` as `X-User-Id` header.

        -  If LDAP authentication is enabled, you must maintain the login in the same way as you normally do. Similarly, if 2FA is enabled for an LDAP user, everything stays the same.
          
        ### Changelog
        | Version      | Description | 
         | ---------------- | ------------|
         |1.0.0            | Added `avatarUrl` property to response       |
         |0.64.0            | Added `me` property.      |
         |0.60.0            | Added      |
      operationId: post-api-v1-login
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                  description: Your user name or email.
                  example: myusername
                password:
                  type: string
                  description: Your pasword.
                  example: my$up3erP@ssw0rd
                resume:
                  type: string
                  description: Your previously issued `authToken`.
                  example: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
                code:
                  type: string
                  description: The 2FA code. It is required if your account has two-factor authentication enabled .
                  example: 224610
            examples:
              Example:
                value:
                  user: test@rocket.test
                  password: vanvica32
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      authToken:
                        type: string
                      userId:
                        type: string
                      me:
                        type: object
                        properties:
                          _id:
                            type: string
                          name:
                            type: string
                          emails:
                            type: array
                            items:
                              type: object
                              properties:
                                address:
                                  type: string
                                verified:
                                  type: boolean
                          status:
                            type: string
                          statusConnection:
                            type: string
                          username:
                            type: string
                          utcOffset:
                            type: integer
                          active:
                            type: boolean
                          roles:
                            type: array
                            items:
                              type: string
                          settings:
                            type: object
                            properties:
                              preferences:
                                type: object
                          avatarUrl:
                            type: string
                x-examples:
                  Example 1:
                    status: success
                    data:
                      authToken: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
                      userId: aobEdbYhXfu5hkeqG
                      me:
                        _id: aYjNnig8BEAWeQzMh
                        name: Rocket Cat
                        emails:
                          - address: rocket.cat@rocket.chat
                            verified: false
                        status: offline
                        statusConnection: offline
                        username: rocket.cat
                        utcOffset: -3
                        active: true
                        roles:
                          - admin
                        settings:
                          preferences: {}
                        avatarUrl: 'http://localhost:3000/avatar/test'
              examples:
                Example:
                  value:
                    status: success
                    data:
                      authToken: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
                      userId: aobEdbYhXfu5hkeqG
                      me:
                        _id: aYjNnig8BEAWeQzMh
                        name: Rocket Cat
                        emails:
                          - address: rocket.cat@rocket.chat
                            verified: false
                        status: offline
                        statusConnection: offline
                        username: rocket.cat
                        utcOffset: -3
                        active: true
                        roles:
                          - admin
                        settings:
                          preferences: {}
                        avatarUrl: 'http://localhost:3000/avatar/test'
      servers:
        - url: 'http://localhost:3000'
  /api/v1/login - with Facebook:
    post:
      tags:
        - Authentication
      summary: Login with Facebook
      description: |-
        ### Changelog
        | Version      | Description | 
         | ---------------- | ------------|
         |1.0.0            | Added `avatarUrl` property to response       |
         |0.64.0            | Added `me` property.      |
         |0.63.0            | Added      |
      operationId: post-api-v1-login-facebook
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceName:
                  type: string
                  description: 'The desired OAuth service name. In this case, `facebook`.'
                  example: facebook
                accessToken:
                  type: string
                  description: Access token provided by Facebook oauth.
                  example: hash
                secret:
                  type: string
                  description: The secret provided by Facebook.
                  example: hash
                expiresIn:
                  type: integer
                  description: Lifetime of token (in seconds).
                  example: 200
              required:
                - serviceName
                - accessToken
                - secret
                - expiresIn
              x-examples:
                Example 1:
                  serviceName: facebook
                  accessToken: hash
                  secret: hash
                  expiresIn: 200
            examples:
              Example 1:
                value:
                  serviceName: facebook
                  accessToken: hash
                  secret: hash
                  expiresIn: 200
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      authToken:
                        type: string
                      userId:
                        type: string
                      me:
                        type: object
                        properties:
                          _id:
                            type: string
                          name:
                            type: string
                          emails:
                            type: array
                            items:
                              type: object
                              properties:
                                address:
                                  type: string
                                verified:
                                  type: boolean
                          status:
                            type: string
                          statusConnection:
                            type: string
                          username:
                            type: string
                          utcOffset:
                            type: integer
                          active:
                            type: boolean
                          roles:
                            type: array
                            items:
                              type: string
                          settings:
                            type: object
                            properties:
                              preferences:
                                type: object
                          avatarUrl:
                            type: string
                x-examples:
                  Example 1:
                    status: success
                    data:
                      authToken: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
                      userId: aobEdbYhXfu5hkeqG
                      me:
                        _id: aYjNnig8BEAWeQzMh
                        name: Rocket Cat
                        emails:
                          - address: rocket.cat@rocket.chat
                            verified: false
                        status: offline
                        statusConnection: offline
                        username: rocket.cat
                        utcOffset: -3
                        active: true
                        roles:
                          - admin
                        settings:
                          preferences: {}
                        avatarUrl: 'http://localhost:3000/avatar/test'
              examples:
                Success Example:
                  value:
                    status: success
                    data:
                      authToken: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
                      userId: aobEdbYhXfu5hkeqG
                      me:
                        _id: aYjNnig8BEAWeQzMh
                        name: Rocket Cat
                        emails:
                          - address: rocket.cat@rocket.chat
                            verified: false
                        status: offline
                        statusConnection: offline
                        username: rocket.cat
                        utcOffset: -3
                        active: true
                        roles:
                          - admin
                        settings:
                          preferences: {}
                        avatarUrl: 'http://localhost:3000/avatar/test'
      servers:
        - url: 'http://localhost:3000'
  /api/v1/login - with Twitter:
    post:
      tags:
        - Authentication
      summary: Login with Twitter
      description: |-
        ### Changelog
        | Version      | Description | 
         | ---------------- | ------------|
         |1.0.0            | Added `avatarUrl` property to response       |
         |0.64.0            | Added `me` property.      |
         |0.63.0            | Added      |
      operationId: post-api-v1-login-twitter
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceName:
                  type: string
                  description: 'The desired OAuth service name. In this case, `twitter`.'
                  example: twitter
                accessToken:
                  type: string
                  description: Access token provided by Twitter OAuth.
                  example: hash
                accessTokenSecret:
                  type: string
                  description: The access token secret provided by Twitter OAuth.
                  example: hash
                appSecret:
                  type: string
                  description: The app secret provided by Twitter.
                  example: hash
                appId:
                  type: string
                  description: The app ID provided by Twitter.
                  example: hash
                expiresIn:
                  type: integer
                  description: Lifetime of token (in seconds).
                  example: 200
              required:
                - serviceName
                - accessToken
                - accessTokenSecret
                - appSecret
                - appId
                - expiresIn
              x-examples:
                Example 1:
                  serviceName: twitter
                  accessToken: hash
                  accessTokenSecret: hash
                  appSecret: hash
                  appId: hash
                  expiresIn: 200
            examples:
              Example 1:
                value:
                  serviceName: twitter
                  accessToken: hash
                  accessTokenSecret: hash
                  appSecret: hash
                  appId: hash
                  expiresIn: 200
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      authToken:
                        type: string
                      userId:
                        type: string
                      me:
                        type: object
                        properties:
                          _id:
                            type: string
                          name:
                            type: string
                          emails:
                            type: array
                            items:
                              type: object
                              properties:
                                address:
                                  type: string
                                verified:
                                  type: boolean
                          status:
                            type: string
                          statusConnection:
                            type: string
                          username:
                            type: string
                          utcOffset:
                            type: integer
                          active:
                            type: boolean
                          roles:
                            type: array
                            items:
                              type: string
                          settings:
                            type: object
                            properties:
                              preferences:
                                type: object
                          avatarUrl:
                            type: string
                x-examples:
                  Example 1:
                    status: success
                    data:
                      authToken: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
                      userId: aobEdbYhXfu5hkeqG
                      me:
                        _id: aYjNnig8BEAWeQzMh
                        name: Rocket Cat
                        emails:
                          - address: rocket.cat@rocket.chat
                            verified: false
                        status: offline
                        statusConnection: offline
                        username: rocket.cat
                        utcOffset: -3
                        active: true
                        roles:
                          - admin
                        settings:
                          preferences: {}
                        avatarUrl: 'http://localhost:3000/avatar/test'
              examples:
                Success Example:
                  value:
                    status: success
                    data:
                      authToken: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
                      userId: aobEdbYhXfu5hkeqG
                      me:
                        _id: aYjNnig8BEAWeQzMh
                        name: Rocket Cat
                        emails:
                          - address: rocket.cat@rocket.chat
                            verified: false
                        status: offline
                        statusConnection: offline
                        username: rocket.cat
                        utcOffset: -3
                        active: true
                        roles:
                          - admin
                        settings:
                          preferences: {}
                        avatarUrl: 'http://localhost:3000/avatar/test'
      servers:
        - url: 'http://localhost:3000'
  /api/v1/login - with Google:
    post:
      tags:
        - Authentication
      summary: Login with Google
      description: |-
        ### Changelog
        | Version      | Description | 
         | ---------------- | ------------|
         |1.0.0            | Added `avatarUrl` property to response       |
         |0.64.0            | Added `me` property.      |
         |0.60.0            | Added      |
      operationId: post-api-v1-login-google
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceName:
                  type: string
                  description: 'The desired OAuth service name. In this case, `google`.'
                accessToken:
                  type: string
                  description: Access token provided by Google OAuth.
                idToken:
                  type: string
                  description: The ID token provided by Google OAuth.
                expiresIn:
                  type: integer
                  description: Lifetime of token (in seconds).
                scope:
                  type: string
                  description: Google scopes for API.
              required:
                - serviceName
                - accessToken
                - idToken
                - expiresIn
              x-examples:
                Example 1:
                  serviceName: google
                  accessToken: hash
                  idToken: hash
                  expiresIn: 200
                  scope: profile
            examples:
              Example 1:
                value:
                  serviceName: google
                  accessToken: hash
                  idToken: hash
                  expiresIn: 200
                  scope: profile
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      authToken:
                        type: string
                      userId:
                        type: string
                      me:
                        type: object
                        properties:
                          _id:
                            type: string
                          name:
                            type: string
                          emails:
                            type: array
                            items:
                              type: object
                              properties:
                                address:
                                  type: string
                                verified:
                                  type: boolean
                          status:
                            type: string
                          statusConnection:
                            type: string
                          username:
                            type: string
                          utcOffset:
                            type: integer
                          active:
                            type: boolean
                          roles:
                            type: array
                            items:
                              type: string
                          settings:
                            type: object
                            properties:
                              preferences:
                                type: object
                          avatarUrl:
                            type: string
                x-examples:
                  Example 1:
                    status: success
                    data:
                      authToken: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
                      userId: aobEdbYhXfu5hkeqG
                      me:
                        _id: aYjNnig8BEAWeQzMh
                        name: Rocket Cat
                        emails:
                          - address: rocket.cat@rocket.chat
                            verified: false
                        status: offline
                        statusConnection: offline
                        username: rocket.cat
                        utcOffset: -3
                        active: true
                        roles:
                          - admin
                        settings:
                          preferences: {}
                        avatarUrl: 'http://localhost:3000/avatar/test'
              examples:
                Success Example:
                  value:
                    status: success
                    data:
                      authToken: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq
                      userId: aobEdbYhXfu5hkeqG
                      me:
                        _id: aYjNnig8BEAWeQzMh
                        name: Rocket Cat
                        emails:
                          - address: rocket.cat@rocket.chat
                            verified: false
                        status: offline
                        statusConnection: offline
                        username: rocket.cat
                        utcOffset: -3
                        active: true
                        roles:
                          - admin
                        settings:
                          preferences: {}
                        avatarUrl: 'http://localhost:3000/avatar/test'
      servers:
        - url: 'http://localhost:3000'
  /api/v1/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: Invalidate your REST API authentication token.
      operationId: post-api-v1-logout
      parameters:
        - name: X-Auth-Token
          in: header
          description: The authorization token of the user
          required: true
          schema:
            type: string
        - name: X-User-Id
          in: header
          description: The user id of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      message:
                        type: string
              examples:
                Example:
                  value:
                    status: success
                    data:
                      message: You've been logged out!
      servers:
        - url: 'http://localhost:3000'
  /api/v1/me:
    get:
      tags:
        - Authentication
      summary: Get Profile Information
      description: |-
        Quick information about the authenticated user.
        ### Changelog
         | Version      | Description | 
         | ---------------- | ------------|
         |1.0.0            | Added `avatarUrl` property to response       |
         |0.68.0            | Added `customFields` property.      |
         |0.48.0            | Added      |
      operationId: get-api-v1-me
      parameters:
        - name: X-User-Id
          in: header
          description: The user ID of the user.
          required: true
          schema:
            type: string
        - name: X-Auth-Token
          in: header
          description: The authorization token of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |-
            OK 

            The `customFields` parameter won't be returned if it doesn't exist on the workspace.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  emails:
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                        verified:
                          type: boolean
                  status:
                    type: string
                  statusConnection:
                    type: string
                  username:
                    type: string
                  utcOffset:
                    type: integer
                  active:
                    type: boolean
                  roles:
                    type: array
                    items:
                      type: string
                  settings:
                    type: object
                    properties:
                      preferences:
                        type: object
                        properties:
                          enableAutoAway:
                            type: boolean
                          idleTimeoutLimit:
                            type: integer
                          desktopNotificationDuration:
                            type: integer
                          audioNotifications:
                            type: string
                          desktopNotifications:
                            type: string
                          mobileNotifications:
                            type: string
                          unreadAlert:
                            type: boolean
                          useEmojis:
                            type: boolean
                          convertAsciiEmoji:
                            type: boolean
                          autoImageLoad:
                            type: boolean
                          saveMobileBandwidth:
                            type: boolean
                          collapseMediaByDefault:
                            type: boolean
                          hideUsernames:
                            type: boolean
                          hideRoles:
                            type: boolean
                          hideFlexTab:
                            type: boolean
                          hideAvatars:
                            type: boolean
                          roomsListExhibitionMode:
                            type: string
                          sidebarViewMode:
                            type: string
                          sidebarHideAvatar:
                            type: boolean
                          sidebarShowUnread:
                            type: boolean
                          sidebarShowFavorites:
                            type: boolean
                          sendOnEnter:
                            type: string
                          messageViewMode:
                            type: integer
                          emailNotificationMode:
                            type: string
                          roomCounterSidebar:
                            type: boolean
                          newRoomNotification:
                            type: string
                          newMessageNotification:
                            type: string
                          muteFocusedConversations:
                            type: boolean
                          notificationsSoundVolume:
                            type: integer
                  customFields:
                    type: object
                    properties:
                      twitter:
                        type: string
                  avatarUrl:
                    type: string
                  success:
                    type: boolean
                x-examples:
                  Example 1:
                    _id: aobEdbYhXfu5hkeqG
                    name: Example User
                    emails:
                      - address: example@example.com
                        verified: true
                    status: offline
                    statusConnection: offline
                    username: example
                    utcOffset: 0
                    active: true
                    roles:
                      - user
                      - admin
                    settings:
                      preferences:
                        enableAutoAway: false
                        idleTimeoutLimit: 300
                        desktopNotificationDuration: 0
                        audioNotifications: mentions
                        desktopNotifications: mentions
                        mobileNotifications: mentions
                        unreadAlert: true
                        useEmojis: true
                        convertAsciiEmoji: true
                        autoImageLoad: true
                        saveMobileBandwidth: true
                        collapseMediaByDefault: false
                        hideUsernames: false
                        hideRoles: false
                        hideFlexTab: false
                        hideAvatars: false
                        roomsListExhibitionMode: category
                        sidebarViewMode: medium
                        sidebarHideAvatar: false
                        sidebarShowUnread: false
                        sidebarShowFavorites: true
                        sendOnEnter: normal
                        messageViewMode: 0
                        emailNotificationMode: all
                        roomCounterSidebar: false
                        newRoomNotification: door
                        newMessageNotification: chime
                        muteFocusedConversations: true
                        notificationsSoundVolume: 100
                    customFields:
                      twitter: '@userstwi'
                    avatarUrl: 'http://localhost:3000/avatar/test'
                    success: true
              examples:
                Example:
                  value:
                    _id: aobEdbYhXfu5hkeqG
                    name: Example User
                    emails:
                      - address: example@example.com
                        verified: true
                    status: offline
                    statusConnection: offline
                    username: example
                    utcOffset: 0
                    active: true
                    roles:
                      - user
                      - admin
                    settings:
                      preferences:
                        enableAutoAway: false
                        idleTimeoutLimit: 300
                        desktopNotificationDuration: 0
                        audioNotifications: mentions
                        desktopNotifications: mentions
                        mobileNotifications: mentions
                        unreadAlert: true
                        useEmojis: true
                        convertAsciiEmoji: true
                        autoImageLoad: true
                        saveMobileBandwidth: true
                        collapseMediaByDefault: false
                        hideUsernames: false
                        hideRoles: false
                        hideFlexTab: false
                        hideAvatars: false
                        roomsListExhibitionMode: category
                        sidebarViewMode: medium
                        sidebarHideAvatar: false
                        sidebarShowUnread: false
                        sidebarShowFavorites: true
                        sendOnEnter: normal
                        messageViewMode: 0
                        emailNotificationMode: all
                        roomCounterSidebar: false
                        newRoomNotification: door
                        newMessageNotification: chime
                        muteFocusedConversations: true
                        notificationsSoundVolume: 100
                    customFields:
                      twitter: '@userstwi'
                    avatarUrl: 'http://localhost:3000/avatar/test'
                    success: true
      servers:
        - url: 'http://localhost:3000'
  /api/v1/users.2fa.enableEmail:
    post:
      tags:
        - Two-Factor Authentication
      summary: Enable 2FA via Email
      description: This endpoint only works if the user has at least one verified email.
      operationId: post-api-v1-users.2fa.enableEmail
      parameters:
        - $ref: '#/components/parameters/Auth-Token'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          $ref: '#/components/responses/trueSuccess'
        '401':
          $ref: '#/components/responses/authorizationError'
      servers:
        - url: 'http://localhost:3000'
  /api/v1/users.2fa.sendEmailCode:
    post:
      tags:
        - Two-Factor Authentication
      summary: Request a new Email Code
      description: Request a two-factor authentication code by email
      operationId: post-api-v1-users.2fa.sendEmailCode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrUsername:
                  type: string
                  description: The email or username of the user.
              required:
                - emailOrUsername
              x-examples:
                Example 1:
                  emailOrUsername: test-funke
            examples:
              Example:
                value:
                  emailOrUsername: test-funke
      responses:
        '200':
          $ref: '#/components/responses/trueSuccess'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  errorType:
                    type: string
                x-examples:
                  Example 1:
                    success: false
                    error: 'emailOrUsername is required [error-parameter-required]'
                    errorType: error-parameter-required
              examples:
                Example:
                  value:
                    success: false
                    error: 'emailOrUsername is required [error-parameter-required]'
                    errorType: error-parameter-required
      servers:
        - url: 'http://localhost:3000'
  /api/v1/users.2fa.disableEmail:
    post:
      tags:
        - Two-Factor Authentication
      summary: Disable 2FA via Email
      description: ''
      operationId: post-api-v1-users.2fa.disableEmail
      parameters:
        - $ref: '#/components/parameters/Auth-Token'
        - $ref: '#/components/parameters/UserId'
        - name: X-2fa-Code
          in: header
          description: 'The 2FA code. '
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/trueSuccess'
        '400':
          description: |- 
            TOTP Required 
            
            The 2FA code is passed as the `X-2fa-Code` query parameter.
            
            It's important to note the **required TOTP method** returned from the response.
            
            - If it's `password`, add the hashed password of the user as the `X-2fa-Code` query parameter. 
            - If it's `email`, add the 2FA code sent via email as the `X-2fa-Code` query parameter.
            - If it's `totp`, add the code from your authenticator app as the `X-2fa-Code` query parameter.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  errorType:
                    type: string
                  details:
                    type: object
                    properties:
                      method:
                        type: string
                      codeGenerated:
                        type: boolean
                      availableMethods:
                        type: array
                        items:
                          type: object
                example:
                    success: false
                    error: 'TOTP Required [totp-required]'
                    errorType: totp-required
                    details:
                      method: password
                      codeGenerated: false
                      availableMethods: []
      servers:
        - url: 'http://localhost:3000'
tags:
  - name: Authentication
  - name: Two-Factor Authentication
components:
  parameters:
    Auth-Token:
      name: X-Auth-Token
      in: header
      description: The `authToken` of the authenticated user.
      required: true
      schema:
        type: string
        example: RScctEHSmLGZGywfIhWyRpyofhKOiMoUIpimhvheU3f
    UserId:
      name: X-User-Id
      in: header
      description: The `userId` of the authenticated user.
      required: true
      schema:
        type: string
        example: rbAXPnMktTFbNpwtJ
  responses:
    trueSuccess:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
            x-examples:
              Example 1:
                success: true
          examples:
            Success:
              value:
                success: true
    authorizationError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
            x-examples:
              Example 1:
                status: error
                message: You must be logged in to do this.
          examples:
            Authorization Error:
              value:
                status: error
                message: You must be logged in to do this.
